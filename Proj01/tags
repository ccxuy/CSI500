!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	csapp.c	/^void Close(int fd) $/;"	f
Connect	csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
Dup2	csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Fclose	csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	csapp.c	/^void Free(void *ptr) $/;"	f
Fstat	csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Gethostbyaddr	csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getpgrp	csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Kill	csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
Listen	csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAXARGS	mshell.c	3;"	d	file:
MAXARGS	shellex.c	3;"	d	file:
Malloc	csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, int port) $/;"	f
Open_listenfd	csapp.c	/^int Open_listenfd(int port) $/;"	f
P	csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	csapp.c	/^void Pause() $/;"	f
Pthread_cancel	csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
Select	csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
V	csapp.c	/^void V(sem_t *sem) $/;"	f
Wait	csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
app_error	csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
builtin_command	mshell.c	/^int builtin_command(char **argv) $/;"	f
builtin_command	shellex.c	/^int builtin_command(char **argv) $/;"	f
dns_error	csapp.c	/^void dns_error(char *msg) \/* DNS-style error *\/$/;"	f
eval	mshell.c	/^void eval(char *cmdline) $/;"	f
eval	shellex.c	/^void eval(char *cmdline) $/;"	f
main	fork.c	/^int main() $/;"	f
main	interact.c	/^int main(int argc, char *arg[])$/;"	f
main	mshell.c	/^int main() $/;"	f
main	project1.c	/^int main( int argc, char *argv[] )$/;"	f
main	shellex.c	/^int main() $/;"	f
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, int port) $/;"	f
open_listenfd	csapp.c	/^int open_listenfd(int port) $/;"	f
parseline	mshell.c	/^int parseline(char *buf, char **argv) $/;"	f
parseline	shellex.c	/^int parseline(char *buf, char **argv) $/;"	f
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
unix_error	csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
